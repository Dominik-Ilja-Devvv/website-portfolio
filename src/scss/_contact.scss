@use "variables" as var;

.contact {
  padding-bottom: 7rem;

  .leading { margin-top: 0; margin-bottom: 2rem; }
}

// ------------------------------
// | controls layout for contact section
// ------------------------------
.contact__inner {
    text-align: center;

    // ------------------------------
    // | We're emulating a grid or flex display in this property by making
    // | all of the children inline-block. We then have to go to the children 
    // | to add on the desired widths and other properties.
    // | 
    // | When items are inline-block we can use vertical-align to align items vertically.
    // | Text-align allows us to align the items horizontally.
    // |
    // | None of these values will have any effect if the display is grid.
    // ------------------------------
    > * {
      display: inline-block;
      vertical-align: bottom;

      @media only screen and (min-width: var.$bp-4) { vertical-align: bottom; }
      @media only screen and (min-width: var.$bp-7) { vertical-align: middle; }
    }

    @supports(display: grid) {
      display: grid;
      column-gap: 4%;
      grid-template-columns: 1fr;

      @media only screen and (min-width: var.$bp-4) { grid-template-columns: 45% 51%; }
    }
}

.contact__content {
  text-align: left; // prevents text from being aligned from parent
  width: 100%;
  margin-bottom: 3rem;

  @media only screen and (min-width: var.$bp-4) {

    // ------------------------------
    // | Have to assign width and margins manually for inline-block layout
    // ------------------------------

    width: 45%; 
    margin-right: 4%; 
    margin-bottom: 0;
  }

  // this overrides previous media query values
  @supports(display: grid) {
    width: 100%; // allows grid to determine element width
    margin-right: unset;
    align-self: center;
  }
}

.contact__form {
  position: relative;
  padding: 1.5rem;
  overflow: hidden;
  background-color: var.$color-black;
  
  @supports(--css: variables) { background-color: var(--color-black); }

  // svg is having issues in IE 11
  svg {

    // ------------------------------
    // | Changed "width: 100%;" to "height: 100%;" because the height
    // | won't change nearly as much as the width across different device widths
    // | allowing the SVG to remain more consistent.
    // ------------------------------

    position: absolute;
    right: 0;
    bottom: 0;
    height: 100%;
    width: auto;
    transform: translate(50%, 0) rotate(-60deg) scale(0.5);
    fill: none;
    stroke: rgba(var.$color-tertiary, 0.05);
    
    @media only screen and (min-width: var.$bp-2) { transform: translate(50%, 0) rotate(-60deg) scale(0.75); }

    // ------------------------------
    // | IE 10 & 11 Specific Query. IE 11 doesn't properly render SVG Elements.
    // | So this query is adjusting for the rendering of the element 10 & 11.
    // ------------------------------
    @media only screen and (-ms-high-contrast: none), (-ms-high-contrast: active) { transform: translate(50%, 0) rotate(-60deg) scale(3); }
  }
}

.contact__group {
  position: relative;
  z-index: 1;
  width: 100%;
  margin-bottom: 1.5rem;

  @supports(display: flex) {
    // flex-direction: column;
    // display: flex;
  }

  // @media only screen and (min-width: var.$bp-5) {
  //   &:not(:last-child) {
  //     margin-right: 2rem;
  //   }
  // }
}

// done
.contact__label {
  margin-bottom: 0.5rem;
  font-family: var.$font-zilla-slab;
  font-size: 1.25rem;
  color: var.$color-muted-light;
  display: block;
  
  @supports(--css: variables) { font-family: var(--font-zilla-slab); color: var(--color-muted-light); }
}

// done 
.contact__input, .contact__textarea {
  color: var.$color-white;
  background-color: transparent;
  caret-color: var.$color-tertiary;
  width: 100%;
  
  @supports(--css: variables) { color: var(--color-white); caret-color: var(--color-tertiary); }
}

// done
.contact__input:focus, .contact__textarea:focus {
  outline: 2px solid var.$color-tertiary;
  
  @supports(--css: variables) { outline: 2px solid var(--color-tertiary, var.$color-tertiary); }
}

// done
.contact__input {
  border: 0;
  border-bottom: 2px solid var.$color-muted;
  
  @supports(--css: variables) { border-bottom: 2px solid var(--color-muted); }
}

// done
.contact__textarea {
  border: 2px solid var.$color-muted;

  @supports(--css: variables) { border: 2px solid var(--color-muted); }
}

// done
.contact__button {
  position: relative;
  z-index: 1;
  display: inline-block;
  padding: 0.5rem 2rem;
  font-family: var.$font-zilla-slab;
  font-size: 1.5rem;
  border: 2px solid var.$color-tertiary;
  
  @supports(--css: variables) { font-family: var(--font-zilla-slab); border-color: var(--color-tertiary); }

  &:hover, &:focus {
    box-shadow: 0 0 10px 0 var.$color-tertiary;
    
    @supports(--css: variables) { box-shadow: 0 0 10px 0 var(--color-tertiary); }
  }
}

.contact__img {
  width: 100%;

    // ------------------------------
    // | Have to assign width and margins manually for inline-block layout
    // ------------------------------

  @media only screen and (min-width: var.$bp-4) { width: 50%; }
  
  @supports(display: grid) { width: 100%; } // allows grid to determine element width

  img {

    // ------------------------------
    // | height 100% allows image to take up full height at expense
    // | of screwing with original dimensions
    // ------------------------------

    min-width: 17.5rem;
    height: 100%; 

    @media only screen and (min-width: var.$bp-4) { min-height: 50rem; } // keeps image and form closer in size when side by side
  }
}
